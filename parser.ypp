%skeleton "lalr1.cc"
%require "3.2"
%defines

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%parse-param { ParseResult& parseResult }

%code requires {
  #include <stdio.h>
  #include "ast.h"
  #include "parseresult.h"
}

%code {
  yy::parser::symbol_type yylex();
}

%token END 0

%token <double> NUM
%token <std::string> VAR

%token LPAREN RPAREN
%token ADD SUB MUL DIV POW
%token SIN COS EXP LN

%token SEMICOLON EQUALS COMMA

%type <std::unique_ptr<Node>> exp

%left ADD SUB
%left MUL DIV
%left POW

%%

input: exp { parseResult.ast = std::move($1); }
| exp SEMICOLON assignments { parseResult.ast = std::move($1); }

exp: NUM { $$ = std::make_unique<Scalar>($1); }
| VAR { $$ = std::make_unique<Variable>($1); parseResult.arguments.insert($1); }
| LPAREN exp RPAREN { $$ = std::move($2); }
| exp ADD exp { $$ = std::make_unique<Add>(std::move($1), std::move($3)); }
| exp SUB exp { $$ = std::make_unique<Sub>(std::move($1), std::move($3)); }
| exp MUL exp { $$ = std::make_unique<Mul>(std::move($1), std::move($3)); }
| exp DIV exp { $$ = std::make_unique<Div>(std::move($1), std::move($3)); }
| exp POW NUM { $$ = std::make_unique<Pow>(std::move($1), $3); }
| SIN LPAREN exp RPAREN { $$ = std::make_unique<Sin>(std::move($3)); }
| COS LPAREN exp RPAREN { $$ = std::make_unique<Cos>(std::move($3)); }
| EXP LPAREN exp RPAREN { $$ = std::make_unique<Exp>(std::move($3)); }
| LN LPAREN exp RPAREN { $$ = std::make_unique<NatLog>(std::move($3)); }

assignments: assignment
| assignments COMMA assignment

assignment: VAR EQUALS NUM { parseResult.vars.insert(std::make_pair($1, $3)); }

%%

int main(int argc, char* argv[]) {
  ParseResult parseResult;
  yy::parser parser(parseResult);
  parser.parse();

  for (const auto& farg : parseResult.arguments) {
    if (parseResult.vars.find(farg) == parseResult.vars.end()) {
      std::cout << "Uninitialized variable: " << farg << std::endl;
      return 1;
    }
  }

  double fvalue = parseResult.ast->value(parseResult.vars, "").first;

  std::map<std::string, double> grad;
  for (const auto& farg: parseResult.arguments) {
    Dual res = parseResult.ast->value(parseResult.vars, farg);
    grad.insert(std::make_pair(farg, res.second));
  }

  std::cout << "Function value: " << fvalue << std::endl;
  for (const auto& partial: grad) {
    std::cout << "Partial derivative d/d" << partial.first << ": " << partial.second << std::endl;
  }
}

void yy::parser::error (const std::string& s)
{
  std::cout << s << std::endl;
}
